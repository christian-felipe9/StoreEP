{
  "_args": [
    [
      "@panosoft/ramda-utils@https://registry.npmjs.org/@panosoft/ramda-utils/-/ramda-utils-0.2.8.tgz",
      "C:\\Users\\robson.correia\\Desktop\\StoreEP\\StoreEP"
    ]
  ],
  "_from": "@panosoft/ramda-utils@>=0.2.8 <0.3.0",
  "_id": "@panosoft/ramda-utils@0.2.8",
  "_inCache": true,
  "_location": "/@panosoft/ramda-utils",
  "_phantomChildren": {},
  "_requested": {
    "name": "@panosoft/ramda-utils",
    "raw": "@panosoft/ramda-utils@https://registry.npmjs.org/@panosoft/ramda-utils/-/ramda-utils-0.2.8.tgz",
    "rawSpec": "https://registry.npmjs.org/@panosoft/ramda-utils/-/ramda-utils-0.2.8.tgz",
    "scope": "@panosoft",
    "spec": "https://registry.npmjs.org/@panosoft/ramda-utils/-/ramda-utils-0.2.8.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/node-chartist"
  ],
  "_resolved": "https://registry.npmjs.org/@panosoft/ramda-utils/-/ramda-utils-0.2.8.tgz",
  "_shasum": "07ce14d6d6f5b611e98a8303d88aa881c6bf328d",
  "_shrinkwrap": null,
  "_spec": "@panosoft/ramda-utils@https://registry.npmjs.org/@panosoft/ramda-utils/-/ramda-utils-0.2.8.tgz",
  "_where": "C:\\Users\\robson.correia\\Desktop\\StoreEP\\StoreEP",
  "author": {
    "name": "Charles Scalfani"
  },
  "bugs": {
    "url": "https://github.com/panosoft/ramda-utils/issues"
  },
  "dependencies": {
    "is_js": "^0.7.4",
    "ramda": "^0.18.0"
  },
  "description": "Utilities built on top of Ramda.",
  "devDependencies": {
    "chai": "^3.2.0",
    "mocha": "^2.3.2",
    "sinon": "^1.16.1",
    "sinon-chai": "^2.8.0"
  },
  "homepage": "https://github.com/panosoft/ramda-utils#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "name": "@panosoft/ramda-utils",
  "optionalDependencies": {},
  "readme": "# ramda-utils\n\nUtilities built on top of Ramda.\n\n[![Travis](https://img.shields.io/travis/panosoft/ramda-utils.svg)](https://travis-ci.org/panosoft/ramda-utils)\n\n## Installation\n\n```sh\nnpm install @panosoft/ramda-utils\n```\n\n## Usage\n\n```js\nvar Ru = require('@panosoft/ramda-utils');\n```\n\n## API\n\n- [`applyTo`](#applyTo)\n- [`compareProps`](#compareProps)\n- [`complementC`](#complementC)\n- [`createIndex`](#createIndex)\n- [`createIndexOpts`](#createIndexOpts)\n- [`defaults`](#defaults)\n- [`defaultsR`](#defaultsR)\n- [`filterObj`](#filterObj)\n- [`filterObjR`](#filterObjR)\n- [`isEmptyC`](#isEmptyC)\n- [`isNotEmptyC`](#isNotEmptyC)\n- [`matchGroups`](#matchGroups)\n- [`mergeAllR`](#mergeAllR)\n- [`mergeR`](#mergeR)\n- [`path`](#path)\n- [`pathCommon`](#pathCommon)\n- [`pickValues`](#pickValues)\n- [`rmap`](#rmap)\n- [`subsetOf`](#subsetOf)\n- [`substring`](#substring)\n- [`sumProps`](#sumProps)\n- [`sumColumn`](#sumColumn)\n- [`toNumber`](#toNumber)\n- [`toString`](#toString)\n- [`toDate`](#toDate)\n- [`trace`](#trace)\n- [`zipApply`](#zipApply)\n\n---\n\n<a name=\"applyTo\"></a>\n### applyTo ( obj , fn )\n\nApply an object to a function\n\n__Arguments__\n\n- `obj` - An object.\n- `fn` - A function.\n\n__Example__\n\n```js\nvar obj = {a: 'a'};\nvar fn = (obj) => obj.a;\nRu.applyTo(obj, fn) // 'a';\n```\n\n---\n\n<a name=\"compareProps\"></a>\n### compareProps ( props , a , b )\n\nReturns a curried comparator function that can be used with `R.sort`. Supports any number of sort orders (i.e. property1 ascending, property 2 descending, etc.). It also supports type based sorting (i.e. recognizes `Date`, `Number`, etc. and sorts them appropriately).\n\n__Arguments__\n\n- `props` - A string or an array of strings used to determine the sort order to apply. Each string signifies a property name to compare. A `'+'` prefix is used to signify ascending order and a `'-'` prefix is used to signify descending order.\n- `a` - A value to compare.\n- `b` - A value to compare.\n\n__Example__\n\n```js\nvar list = [\n  { b: true,  n: 10,  s: 'test',  d: new Date('1/1/2015') },\n  { b: false, n: -1,  s: 'aaaa',  d: new Date('1/1/2015') },\n  { b: true,  n: 12,  s: 'aaaa',  d: new Date('1/1/2015') },\n  { b: false, n: 3,   s: 'xyz',   d: new Date('1/1/2000') },\n  { b: false, n: 12,  s: 'aaaa',  d: new Date('1/1/2015') }\n];\nvar props = ['-d', '+s', '-n', 'b'];\nR.sort(Ru.compareProps(props), list);\n/*\n  [\n    { b: false, n: 12,  s: 'aaaa',  d: new Date('1/1/2015') },\n    { b: true,  n: 12,  s: 'aaaa',  d: new Date('1/1/2015') },\n    { b: false, n: -1,  s: 'aaaa',  d: new Date('1/1/2015') },\n    { b: true,  n: 10,  s: 'test',  d: new Date('1/1/2015') },\n    { b: false, n: 3,   s: 'xyz',   d: new Date('1/1/2000') }\n  ];\n */\n```\n---\n\n<a name=\"complementC\"></a>\n### complementC ( fn )\n\nReturns a curried complement.\n\n__Arguments__\n\n- `fn` - A function.\n\n__Example__\n\n```js\nvar fn = (a,b) => b;\nfn(null, false) // false;\nRu.complementC(fn)(null)(false) // true;\n```\n\n---\n\n<a name=\"createIndex\"></a>\n### createIndex ( keys, objs )\n\nReturns an indexed for an array of objects. This is just a partially applied version of [`createIndexOpts`](#createIndexOpts) with default `options`.\n\n__Arguments__\n\n- `keys` - An array of keys to index on. If multiple keys are given then the keys are created with the default delimiter between keys, |. To change this delimiter use [`createIndexOpts`](#createIndexOpts).\n- `objs` - An array of objects to index.\n\n__Example with single key__\n\n```js\nvar indexTestData = [\n\t{a: 1, b: 'a', c: 'x'},\n\t{a: 2, b: 'b', c: 'y'},\n\t{a: 3, b: 'b', c: 'y'},\n\t{a: 4, b: 'b', c: 'z'}\n];\ncreateIndex(['b'], indexTestData);\n// \t\t{\n//\t\t\ta: [{a: 1, b: 'a', c: 'x'}],\n//\t\t\tb: [\n//\t\t\t\t{a: 2, b: 'b', c: 'y'},\n//\t\t\t\t{a: 3, b: 'b', c: 'y'},\n//\t\t\t\t{a: 4, b: 'b', c: 'z'}\n//\t\t\t]\n//\t\t}\n\n```\n\n__Example with composite key__\n\n\n```js\nvar indexTestData = [\n\t{a: 1, b: 'a', c: 'x'},\n\t{a: 2, b: 'b', c: 'y'},\n\t{a: 3, b: 'b', c: 'y'},\n\t{a: 4, b: 'b', c: 'z'}\n];\ncreateIndex(['b', 'c'], indexTestData);\n//  {\n//        'a|x': [{a: 1, b: 'a', c: 'x'}],\n//        'b|y': [\n//            {a: 2, b: 'b', c: 'y'},\n//            {a: 3, b: 'b', c: 'y'}\n//        ],\n//        'b|z': [{a: 4, b: 'b', c: 'z'}]\n//    }\n```\n---\n\n<a name=\"createIndexOpts\"></a>\n### createIndexOpts ( options, keys, objs )\n\nReturns an indexed for an array of objects with the specified `options`.\n\n__Arguments__\n\n- `options`:\n    - `unique` - (default: `false`) If `true` then if a key is not unique and Exception is thrown.\n    - `keyDelimiter` - (default: `|`) The delimiter used between object values to build the index key. This MUST be a character that is guaranteed to NOT be in the values otherwise the index may not be built properly.\n- `keys` - An array of keys to index on.\n- `objs` - An array of objects to index.\n\n__Examples__\n\n```js\nvar indexTestData = [\n\t{a: 1, b: 'a', c: 'x'},\n\t{a: 2, b: 'b', c: 'y'},\n\t{a: 3, b: 'b', c: 'y'},\n\t{a: 4, b: 'b', c: 'z'}\n];\ncreateIndexOpts({keyDelimiter: '&'}, ['b', 'c'], indexTestData);\n//    {\n//        'a&x': [{a: 1, b: 'a', c: 'x'}],\n//        'b&y': [\n//            {a: 2, b: 'b', c: 'y'},\n//            {a: 3, b: 'b', c: 'y'}\n//        ],\n//        'b&z': [{a: 4, b: 'b', c: 'z'}]\n//    }\n\n```\n\n---\n\n<a name=\"defaults\"></a>\n### defaults ( def , obj )\n\nCreates a new object with the own properties of `def` merged with the _defined_ own properties of `obj`.\n\nAny properties of `obj` that resolve to `undefined` will be replaced by the corresponding properties in `def` if they exist. Otherwise, properties that resolve to `undefined` in both `obj` and `def` will be omitted in the returned object.\n\n__Arguments__\n\n- `def` - An object containing default properties.\n- `obj` - An object to default.\n\n__Example__\n\n```js\nvar def = {a: 1, b: 2, c: 3};\nvar obj = {a: 4, b: undefined};\nRu.defaults(def, obj); // { a: 4, b: 2, c: 3 }\n```\n\n---\n\n<a name=\"defaultsR\"></a>\n### defaultsR ( def , obj )\n\nRECURSIVE version of [`defaults`](#defaults). NOTE: When comparing keys, recursion only occurs if both keys are objects, otherwise a simple non-recursive replacement occurs.\n\n__Arguments__\n\n- `def` - An object containing default properties.\n- `obj` - An object to default.\n\n__Example__\n\n```js\nvar def = {a: 1, b: 2, c: 3, o: {x: 1, z: 3}};\nvar obj = {a: 4, b: undefined, o: {x: undefined, y: 2}};\nRu.defaultsR(def, obj); // {a: 4, b: 2, c: 3, o: {x: 1, y: 2, z: 3}}\n```\n\n---\n\n<a name=\"filterObj\"></a>\n### filterObj ( pred , obj )\n\nFilters an object by property.\n\n__Arguments__\n\n- `pred` - A function used to test each object property. It is called with the property `value` and should return a `Boolean`.\n- `obj` - An object to filter.\n\n__Example__\n\n```js\nvar obj = {a: true, b: false, c: true};\nvar pred = (x) => x;\nRu.filterObj(pred, obj) // {a: true, c: true}\n```\n\n---\n\n<a name=\"filterObjR\"></a>\n### filterObjR ( pred , obj )\n\nRECURSIVE version of [`filterObj`](#filterObj). NOTE: `pred` is NOT applied to object keys which means all object keys (recursively) will be included.\n\n__Arguments__\n\n- `pred` - A function used to test each object property. It is called with the property `value` and should return a `Boolean`.\n- `obj` - An object to filter.\n\n__Example__\n\n```js\nvar obj = {a: true, b: false, c: true, o: {a: true, b: false}};\nvar pred = (x) => x;\nRu.filterObjR(pred, obj) // {a: true, c: true, o: {a: true}}\n```\n\n---\n\n<a name=\"isEmptyC\"></a>\n### isEmptyC ( fn )\n\nReturns a curried function that tests whether the original function returns a list with zero elements when called.\n\n__Arguments__\n\n- `fn` - A function.\n\n__Example__\n\n```js\nvar fn = (a,b) => a+b;\nfn('a','b') // 'ab'\nfn('','') // ''\n\nRu.isEmptyC(fn)('a')('b') // false;\nRu.isEmptyC(fn)('')('') // true;\n```\n\n---\n\n<a name=\"isNotEmptyC\"></a>\n### isNotEmptyC ( fn )\n\nReturns a curried function that tests whether the original function returns a list with elements when called.\n\n__Arguments__\n\n- `fn` - A function.\n\n__Example__\n\n```js\nvar fn = (a,b) => a+b;\nfn('a','b') // 'ab'\nfn('','')   // ''\n\nRu.isNotEmptyC(fn)('a')('b')  // true;\nRu.isNotEmptyC(fn)('')('')    // false;\n```\n\n---\n\n<a name=\"matchGroups\"></a>\n### matchGroups ( reg , str )\n\nApplies a Regular Expression to a String and returns the matched groups as an array of arrays. Returns an empty array, [], if no match.\n\n__Arguments__\n\n- `reg` - A regular expression.\n- `str` - A string to search.\n\n__Example__\n\n```js\nvar str = 'abcd abbbd ab___d';\nvar reg = /ab(.+?)(d)/g;\nRu.matchGroups(reg, str); // [ [ 'c', 'd'], [ 'bb', 'd' ], ['___', 'd'] ]\n\nRu.matchGroups(/xyz/, str); // []\n```\n\n---\n\n<a name=\"mergeAllR\"></a>\n### mergeAllR ( objs )\n\nRECURSIVE version of R.mergeAll (see Ramda).  NOTE: When comparing keys, recursion only occurs if both keys are objects, otherwise a simple non-recursive replacement occurs.\n\n__Arguments__\n\n- `objs` - Array of objects to merge.\n\n__Example__\n\n```js\nvar a = {a: 1, o: {a: 1, x: 1}};\nvar b = {b: 2, o: {b: 2, x: 2}};\nvar c = {c: 3, o: {c: 3, x: 3}};\nR.mergeAllR([a, b, c]); // {a: 1, b:2, c: 3, o: {a: 1, b: 2, c: 3, x: 3}}\n\nvar a = {oo: 'a'}};\nvar b = {oo: {y: 2}}; // this replaces a non-object with {y: 2}\nvar c = {oo: {x: 1}};\nR.mergeAllR([a, b, c]); // {oo: {x: 1, y: 2}}\n\nvar a = {oo: {y: 2}};\nvar b = {oo: 'a'}}; // this replaces the object {y: 2} with a non-object\nvar c = {oo: {x: 1}};\nR.mergeAllR([a, b, c]); // {oo: {x: 1}}\n\n```\n\n---\n\n<a name=\"mergeR\"></a>\n### mergeR ( a , b )\n\nRECURSIVE version of R.merge (see Ramda). NOTE: When comparing keys, recursion only occurs if both keys are objects, otherwise a simple non-recursive replacement occurs.\n\n__Arguments__\n\n- `a` - First object to merge.\n- `b` - Second object to merge with first.\n\n__Example__\n\n```js\nvar a = {a: 1, b: 2, d: 4, o: {x: 1, z: 3}};\nvar b = {a: 10, c: 30, o: {x: 10, y: 20}};\nRu.mergeR(a, b) // {a: 10, b: 2, c: 30, d: 4, o: {x: 10, y: 20, z: 3}}\nRu.mergeR(b, a) // {a: 1, b: 2, c: 30, d: 4, o: {x: 1, y: 20, z: 3}}\n```\n\n---\n\n<a name=\"path\"></a>\n### path ( path , obj )\n\nRetrieve a value at a given path using the standard `.` path delimiter.\n\n__Arguments__\n\n- `path` - A path to a value within an object.\n- `obj` - An object to retrieve value from.\n\n__Example__\n\n```js\nRu.path('a.b', {a: {b: 1}}); // returns 1\n```\n\n---\n\n<a name=\"pathCommon\"></a>\n### pathCommon ( delimiter, path , obj )\n\nRetrieve a value at a given path with the specified path `delimiter`.\n\n__Arguments__\n\n- `delimiter` - A path delimiter.\n- `path` - A path to a value within an object.\n- `obj` - An object to retrieve value from.\n\n__Example__\n\n```js\nRu.pathCommon('/', 'a/b', {a: {b: 1}}); // returns 1\n```\n\n---\n\n<a name=\"pickValues\"></a>\n### pickValues ( keys , obj )\n\nPicks values from an object using the specified keys. Returns a new array.\n\n__Arguments__\n\n- `keys` - A string or an array of strings corresponding to the keys of values to be picked.\n- `obj` - An object to pick values from.\n\n__Example__\n\n```js\nvar obj = {a: true, b: false, c: true};\nvar keys = ['b', 'c'];\nRu.pickValues(keys, obj) // [false, true]\n```\n\n---\n\n<a name=\"rmap\"></a>\n### rmap ( obj , fns )\n\nMaps an array of functions to their return values by applying an object to each.\n\n__Arguments__\n\n- `obj` - An object to apply.\n- `fns` - A function or an array of functions to map.\n\n__Example__\n\n```js\nvar obj = {a: 'a', b: 'b'};\nvar fns = [(obj) => obj.a, (obj) => obj.b];\nRu.rmap(obj, fns) // ['a', 'b']\n```\n\n---\n\n<a name=\"subsetOf\"></a>\n### subsetOf ( set , sub )\n\nTests if an array is a subset of another.\n\n__Arguments__\n\n- `set` - An array that defines the complete set.\n- `sub` - An array to test.\n\n__Example__\n\n```js\nvar set = [1, 2, 3, 4];\nvar sub = [2, 3];\nvar notSub = [4, 5];\nRu.subsetOf(set, sub);     // true\nRu.subsetOf(set, notSub)); // false\n```\n\n---\n\n<a name=\"substring\"></a>\n### substring ( start , end, str )\n\nReturns the substring of the specified string. This function differs from the standard JavaScript function in the case where `end` is `null`. In that case, end behaves as if it were not specified and will represent the end of the string.\n\n__Arguments__\n\n- `start` - An integer between 0 and the length of the string, specifying the offset into the string of the first character to include in the returned substring.\n- `end` - An integer between 0 and the length of the string, which specifies the offset into the string of the first character not to include in the returned substring. If `null`, then it will extract characters until the end of the string.\n\n__Example__\n\n```js\nsubstring(1, 2, 'abc');     // 'b'\nsubstring(1, null, 'abc'); // 'bc'\n```\n\n---\n\n<a name=\"sumProps\"></a>\n### sumProps ( keys , obj )\n\nReturns the sum of the specified properties.\n\n__Arguments__\n\n- `keys` - An array of strings used to determine which properties to sum.\n- `obj` - An object containing the specified keys.\n\n__Example__\n\n```js\nvar obj = {a: 1, b: 2, c: 4};\nvar keys = ['b', 'c'];\nRu.sumProps(keys, obj);  // 6\n```\n\n---\n\n<a name=\"sumColumn\"></a>\n### sumColumn ( key , objs )\n\nReturn the sum of the specified property across an array of objects.\n\n__Arguments__\n\n- `key` - A string used to determine which property to sum.\n- `objs` - An object or an array of objects containing the specified key.\n\n__Example__\n\n```js\nvar objs = [{a: 1}, {a: 2}, {a: 4}];\nvar key = 'a';\nRu.sumColumn(key, objs)  // 7\n```\n\n---\n\n<a name=\"toNumber\"></a>\n### toNumber ( x )\n\nConverts a value to a `Number`.\n__Arguments__\n\n- `x` - A value to convert.\n\n__Example__\n\n```js\nvar str = '1';\nRu.toNumber(str) // 1\n```\n\n---\n\n<a name=\"toString\"></a>\n### toString ( x )\n\nConverts a value to a `String`.\n\n__Arguments__\n\n- `x` - A value to convert.\n\n__Example__\n\n```js\nvar num = 1;\nRu.toString(num) // '1'\n```\n\n---\n\n<a name=\"toDate\"></a>\n### toDate ( x )\n\nConvert a value to a `Date`.\n\n__Arguments__\n\n- `x` - A value to convert.\n\n__Example__\n\n```js\nvar str = '1/1/2000';\nRu.toDate(str)  // new Date(str)\n```\n\n---\n\n<a name=\"trace\"></a>\n### trace ( msg , x )\n\nLogs a message and value and then returns the value.\n\n__Arguments__\n\n- `msg` - A string message to log.\n- `x` - A value to log and return.\n\n__Example__\n\n```js\nvar msg = 'X:';\nvar fn = R.compose(R.add(1), Ru.trace(msg), R.add(1));\n\nvar result = fn(1);   // stdout: 'X: 3'\nconsole.log(result);  // 3\n```\n\n---\n\n<a name=\"zipApply\"></a>\n### zipApply ( fns , objs )\n\nZips an array of functions and an array of objects into an array of values produced by applying each object to its respective function.\n\n__Arguments__\n\n- `fns` - An array of functions.\n- `objs` - An array of objects.\n\n__Example__\n\n```js\nvar objs = [{a: 'a'}, {b: 'b'}];\nvar fns = [(obj) => obj.a, (obj) => obj.b];\nRu.zipApply(fns, objs) // ['a', 'b']\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/panosoft/ramda-utils.git"
  },
  "scripts": {
    "minor": "npm version minor && git push --follow-tags && npm publish",
    "patch": "npm version patch && git push --follow-tags && npm publish",
    "test": "mocha"
  },
  "version": "0.2.8"
}
