{
  "_args": [
    [
      {
        "raw": "node-chartist@https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
        "scope": null,
        "escapedName": "node-chartist",
        "name": "node-chartist",
        "rawSpec": "https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
        "spec": "https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
        "type": "remote"
      },
      "C:\\Users\\robso\\Desktop\\StoreEP\\StoreEP"
    ]
  ],
  "_from": "https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
  "_id": "node-chartist@1.0.5",
  "_inCache": true,
  "_location": "/node-chartist",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-chartist@https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
    "scope": null,
    "escapedName": "node-chartist",
    "name": "node-chartist",
    "rawSpec": "https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
    "spec": "https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
  "_shasum": "1fd47901c265d470697d99dd4ef11de734344e3a",
  "_shrinkwrap": null,
  "_spec": "node-chartist@https://registry.npmjs.org/node-chartist/-/node-chartist-1.0.5.tgz",
  "_where": "C:\\Users\\robso\\Desktop\\StoreEP\\StoreEP",
  "author": "",
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "dependencies": {
    "@panosoft/ramda-utils": "^0.2.8",
    "brfs": "^1.4.3",
    "chartist": "^0.11.0",
    "chartist-plugin-axistitle": "0.0.1",
    "co": "^4.6.0",
    "is_js": "^0.9.0",
    "jsdom": "^9.0.0",
    "matchmedia": "^0.1.2",
    "promisify-node": "^0.2.1",
    "ramda": "^0.18.0",
    "underscore.string": "^3.3.4"
  },
  "description": "SVG Charts on the server.",
  "devDependencies": {
    "chai": "^3.4.1",
    "chai-as-promised": "^5.1.0",
    "cheerio": "^0.19.0",
    "less": "^2.7.1",
    "mocha": "^2.3.4",
    "rimraf": "^2.5.3",
    "sinon": "^1.17.7",
    "sinon-chai": "^2.8.0",
    "touch": "^1.0.0"
  },
  "license": "Unlicense",
  "main": "lib/index.js",
  "name": "node-chartist",
  "optionalDependencies": {},
  "readme": "# node-chartist\n\n> SVG Charts on the server.\n\n[![Travis](https://img.shields.io/travis/panosoft/node-chartist.svg)](https://travis-ci.org/panosoft/node-chartist)\n\nNode Chartist is a functional server-side wrapper for the popular [Chartist](http://gionkunz.github.io/chartist-js/index.html) library. It generates static svg charts and adds support for a few useful features such as axis titles and chart legends.\n\n# Installation\n\n```sh\nnpm install node-chartist\n```\n\nThe accompanying CSS can be found at `dist/main.css` after installation.\n\n# Usage\n\n```js\nconst co = require('co');\nconst generate = require('node-chartist');\n\nco(function * () {\n\n  // options object\n  const options = {width: 400, height: 200};\n  const data = {\n    labels: ['a','b','c','d','e'],\n    series: [\n      [1, 2, 3, 4, 5],\n      [3, 4, 5, 6, 7]\n    ]\n  };\n  const bar = yield generate('bar', options, data); //=> chart HTML\n\n\n  // options function\n  const options = (Chartist) => ({width: 400, height: 200, axisY: { type: Chartist.FixedScaleAxis } });\n  const data = {\n    labels: ['a','b','c','d','e'],\n    series: [\n      [1, 2, 3, 4, 5],\n      [3, 4, 5, 6, 7]\n    ]\n  };\n  const bar = yield generate('bar', options, data); //=> chart HTML\n\n});\n```\n\n# API\n\n## generate ( type , options , data )\n\nA curried function that generates a static svg chart.\n\nReturns a `Promise` that is fulfilled with the static chart HTML.\n\n__Arguments__\n\n- `type` - A string used to determine what type of chart to generate. Supported values are:\n\n  - `bar`\n  - `line`\n  - `pie`\n\n\n- `options` - An object or a function that returns an object of chart options. If a function is used, it will be called with the `Chartist` object.\n\n    Options are dependent on the chart `type`. All options in the [Chartist Api Documentation](http://gionkunz.github.io/chartist-js/api-documentation.html) are supported. In addition to those, the following options are supported by node-chartist:\n\n  - `axisX.title` - A string to use as the x axis title.\n\n  - `axisY.title` - A string to use as the y axis title.\n\n  - `legend` - A boolean used to determine whether a legend should be generated. Defaults to `true`.\n\n\n- `data` - An object containing data used to generate the chart. The structure of this object depends on chart `type`. Please refer to the [Chartist Api Documentation](http://gionkunz.github.io/chartist-js/api-documentation.html) for complete details.\n\n  For bar and line charts, this object contains the following properties\n\n  - `labels` - An array of string labels to apply to each value.\n\n  - `series` - An array of arrays or objects containing the values to plot. If objects are used, the following properties are supported:\n\n    - `name` - A string specifying the name of the series. The name will be used in the legend and will be set as the ct:series-name attribute on the series group.\n\n    - `value` - An array of values for the series.\n\n    - `className` - A string to override the CSS class name for the series group.\n\n    - `meta` - Meta data is serialized and written to a ct:meta attribute on the series group.\n\n    Examples:\n\n    ```js\n    const data = {\n      labels: ['a', 'b', 'c', 'd', 'e'],\n      series: [\n        [1, 2, 3, 4, 5],\n        [3, 4, 5, 6, 7]\n      ]\n    };\n    ```\n\n    ```js\n    const data = {\n      labels: ['a', 'b', 'c', 'd', 'e'],\n      series: [\n        {name: 'Series 1', value: [1, 2, 3, 4, 5]},\n        {name: 'Series 2', value: [3, 4, 5, 6, 7]}\n      ]\n    };\n    ```\n\n  For pie charts, this object contains the following properties:\n\n  - `series` - An array of values or objects containing values to plot. If objects are used, the following properties are supported:\n\n    - `name` - A string specifying the name of the series. The name will be used in the legend and will be set as the ct:series-name attribute on the series group.\n\n    - `value` - An array of values for the series.\n\n    - `className` - A string to override the CSS class name for the series group.\n\n    - `meta` - Meta data is serialized and written to a ct:meta attribute on the series group.\n\n    Examples:\n\n    ```js\n    const data = {\n      series: [ 15, 25 ]\n    };\n    ```\n\n    ```js\n    const data = {\n      series: [\n        {name: 'Series 1', value: 15 },\n        {name: 'Series 2', value: 25 }\n      ]\n    };\n    ```\n\n__Examples__\n\nBar:\n\n```js\nco(function * () {\n  const options = {\n    width: 400,\n    height: 200,\n    axisX: { title: 'X Axis (units)' },\n    axisY: { title: 'Y Axis (units)' }\n  };\n\n  const bar = yield generate('bar', options, {\n    labels: ['a', 'b', 'c', 'd', 'e'],\n    series: [\n      {name: 'Series 1', value: [1, 2, 3, 4, 5]},\n      {name: 'Series 2', value: [3, 4, 5, 6, 7]}\n    ]\n  });\n})\n```\n\nLine:\n\n```js\nco(function * () {\n  const options = {\n    width: 400,\n    height: 200,\n    axisX: { title: 'X Axis (units)' },\n    axisY: { title: 'Y Axis (units)' }\n  };\n\n  const line = yield generate('line', options, {\n    labels: ['a', 'b', 'c', 'd', 'e'],\n    series: [\n      {name: 'Series 1', value: [1, 2, 3, 4, 5]},\n      {name: 'Series 2', value: [3, 4, 5, 6, 7]}\n    ]\n  });\n})\n```\n\nPie:\n\n```js\nco(function * () {\n  const options = { width: 400, height: 200 };\n\n  const pie2 = yield generate('pie', options, {\n    series: [\n      {name: 'Series 1', value: 15 },\n      {name: 'Series 2', value: 25 }\n    ]\n  });\n})\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "lessc lib/main.less dist/main.css && touch node_modules/canvas.js",
    "prebuild": "rimraf dist/*",
    "pretest": "npm run build",
    "test": "mocha",
    "watch": "watch 'npm run build' ./lib ./node_modules"
  },
  "version": "1.0.5"
}
